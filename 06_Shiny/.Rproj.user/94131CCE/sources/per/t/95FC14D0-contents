#source(paste0(basepath, "scripts/06_Shiny/utilities_network.R"))
#source(paste0(basepath, "scripts/06_Shiny/utilities_de.R"))

# Define server logic required to generate and plot 
server <- shinyServer(function(input, output) {
  
  ### DIFFERENTIAL EXPRESSION ----------------------------------
  
  # DE data set
  de_data <- reactive({
    # read DE table to create volcano plot
    table <- fread(paste0("tables/de/02_",
                          input$region,"_deseq2_Dex_1_vs_0_lfcShrink.txt"))
    # table$Gene_Symbol <- mapIds(org.Mm.eg.db, keys = table$V1, 
    #                             keytype = "ENSEMBL", column="SYMBOL")
    table <- table %>%
      dplyr::select(Gene_Symbol, Ensembl_ID:padj) %>%
      dplyr::mutate_at(vars(baseMean, log2FoldChange, lfcSE), ~round(.,4)) %>%
      dplyr::mutate_at(vars(pvalue, padj), ~signif(.,6))
  })

  
  # Volcano Plot displaying DE results
  output$volcano_plot <- renderPlotly({
    
    # req(de_data())
    
    # add column that indicates if gene is significant
    indices <- input$de_table_rows_all
    table <- de_data()[indices,] %>%
      dplyr::mutate(sig = as.factor(ifelse(padj <= 0.1, "p_adj <= 0.1", "p_adj > 0.1")))
    
    # volcano plot
    # volcano_plot <- plot_ly(data = table, x = ~log2FoldChange, y = ~-log10(padj),
    #                         color = ~sig, colors = "Set1",
    #                         text = ~paste0("Gene: ", V1),
    #                         source = "volcano_plot") %>%
    #   layout(title = paste0("Volcano Plot ", input$region))
    volcano_plot <-
      ggplot(data = table, aes(
        x = log2FoldChange,
        y = -log10(padj),
        col = sig,
        text = paste0("Ensembl_ID: ", Ensembl_ID, "\nGene_Symbol: ", Gene_Symbol)
      )) +
      geom_point() +
      scale_colour_brewer(palette = "Set1") +
      theme_light() +
      theme(plot.title = element_text(size = 11), legend.title = element_blank()) +
      ggtitle(label = paste0("Volcano Plot ", input$region))
    ggplotly(volcano_plot,
             source = "volcano_plot")
  })
  
  # Boxplot displaying norm expression values
  output$exp_plot <- renderPlotly({
    
    # req(de_data())
    
    # access data from click event
    d <- event_data("plotly_click", source = "volcano_plot",
                    priority = "event")
    # print(d)
    # don't show anythiny if no point was clicked
    if (is.null(d)) return(NULL) 
    
    # identify ensembl ID using the DE data
    ensembl_id <- de_data()[input$de_table_rows_all,]$Ensembl_ID[d$pointNumber + 1] # use pointNumber/rowNumber of clicked point
    gene_symbol <- de_data()[input$de_table_rows_all,]$Gene_Symbol[d$pointNumber + 1]
    
    # read table with normalized expression values
    exp_table <- fread(paste0("tables/de/02_",
                              input$region,"_deseq2_expression_vsd.txt"))
    
    # subset to row of clicked gene and reformat 
    exp_gene <- data.table::transpose(exp_table[V1 == ensembl_id,2:ncol(exp_table)], keep.names = "condition") %>%
      dplyr::rename("expression" = "V1")
    exp_gene$condition <- str_replace(exp_gene$condition, ".*\\_","")
    exp_gene$mouse_id <- str_extract(exp_gene$condition, pattern = "[0-9]+")
    exp_gene$condition <- as.factor(str_replace(exp_gene$condition, "[0-9]+",""))
    
    # boxplot with jitter points of expression values in CNTRL and DEX
    exp_plot <-
      ggplot(exp_gene, aes(x = condition, y = expression)) +
      geom_boxplot() +
      geom_jitter(color = "black",
                  size = 0.4,
                  alpha = 0.9,
                  aes(text = sprintf('mouse_ID: %s', mouse_id))) +
      # scale_fill_manual(values = c("#1F6D84", "#E6A54D")) +
      theme_light() +
      theme(legend.position = "none",
            plot.title = element_text(size = 11)) +
      ggtitle(paste0("Gene expression of ", gene_symbol, " in ", input$region)) +
      xlab("") +
      ylab("Normalized expression")
    # ggplot to plotly
    ggplotly(exp_plot)
    
  })
  
  # Data table with DE results
  output$de_table <- DT::renderDataTable({
    de_data() %>%
      # dplyr::rename("Ensembl_ID" = "V1") %>%
      datatable(filter = list(position = 'top'))
  }, server = TRUE) # FALSE to enable download of all pages with button
  
  # Download of (filtered) DE results
  output$download1 <- downloadHandler(
    filename = function() {
      paste0("DE_dexStimMouse_", input$region, ".csv")
    },
    content = function(file) {
      indices <- input$de_table_rows_all
      write.csv(de_data()[indices, ], file)
    }
  )
  
  # Upset plot and table from upsetPlot module
  upset_de <- upsetPlotServer("upsetDE")
  
  
  ############# NETWORK ANALYSIS ##############################
  
  
  # Network data (nodedegree/nodebetweenness)
  overview_data <- reactive({
    
    # Read nodedegrees/nodebetweenness
    filename <- list.files(path = paste0("tables/network/",
                                         "03_AnalysisFuncoup"),
                           pattern = paste0("*_", input$overview_region,
                                            "_funcoup_", input$overview_network, "_",
                                            input$overview_metric,"Norm_betacutoff0.01.csv"),
                           full.names = TRUE)
    data <- fread(file = filename)
    
  })
  
  
  # Histogram network overview
  output$histogram_network <- renderPlotly({
    
    req(overview_data())
    
    # Histogram of nodedegree/nodebetweenness
    if (input$overview_metric == "nodedegrees"){
      histogram_network <- ggplot(overview_data(), aes(x=nodedegree)) + 
        geom_histogram()
    } else {
      histogram_network <- ggplot(overview_data(), aes(x=nodebetweenness)) + 
        geom_histogram()
    }
    ggplotly(histogram_network)
  })
  
  # Barplot network overview
  output$barplot_network <- renderPlotly({
    
    req(overview_data())
    
    # Histogram of nodedegree/nodebetweenness
    if (input$overview_metric == "nodedegrees"){
      barplot_network <- ggplot(overview_data(), aes(x=nodedegree))
    } else {
      barplot_network <- ggplot(overview_data(), aes(x=nodebetweenness)) + 
        geom_histogram()
    }
    
    barplot_network <- barplot_network +
      geom_bar()
    ggplotly(barplot_network)
  })
  
  ### SINGLE REGION NETWORK -------------------------------
  
  # Single region network and table from networkSingle module
  net_single <- networkSingleServer("singleVisualization")
  
  
  ### MULTI REGION NETWORK ---------------------------------------
  
  # Multi region network and table from networkMulti module
  net_multi <- networkMultiServer("multiVisualization")
  
  
})

